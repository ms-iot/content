---
layout: default
title: Remote Display Experience
permalink: /en-US/win10/RemoteDisplay.htm
lang: en-US
deviceName: Remote Display Experience
---
<div class="row">
  <div class="col-xs-24">
    <ol class="breadcrumb">
      <li><a href="https://developer.microsoft.com/en-us/windows/iot">IoT Home</a></li>
      <li><a href="{{site.baseurl}}/{{page.lang}}/GetStarted.htm">Get Started</a></li>
      <li class="active">Remote Display Experience</li>
    </ol>
    <header class="page-title-header">
      <h1 class="page-title">Remote Display Experience</h1>
      <h2 class="page-subtitle">View and control your Windows 10 IoT Core UWP applications remotely, from a Windows 10 desktop PC, tablet, or phone.</h2>
    </header>
  </div>
</div>

<h2>Overview<span class="pull-right"><a id="overview-toggle" class="toggle-button" onClick="hideDiv('overview')">Hide</a></span></h2>
<hr/>
<div id="overview" class="toggle-section">
  <div class="row">
    <div class="col-xs-24 col-no-padding">
      <p>The remote display experience is a technology used to remotely control UWP applications running on a Windows 10 IoT Core device.  Remote control can be established from any Windows 10 desktop PC, tablet, or phone, putting a display on every displayless device.</p>
      <p> To see an example of the technology in action, check out this <a href="https://www.youtube.com/watch?v=p4vw3taOVyM" target="_blank">YouTube video</a>.  In the second half, the demonstrator uses a tablet to remotely control the Windows 10 IoT Core device, using both touch and accelerometer to control the system.</p>
      <p><img alt="Remote display experience" src="{{site.baseurl}}/Resources/images/remote-display-experience.png"></p>
      <p>Users connect to their Windows 10 IoT Core devices through a Microsoft Store application installed on their Windows 10 companion device of choice.  The UI generated by the UWP application running on the Windows 10 IoT Core device is remoted to the display of the companion device, while input and sensor data are sent in the opposite direction.</p>
      <p>The functionality is easy-to-use, and is included out-of-box on the latest Insider build of Windows 10 IoT Core.  Learn how to use it below.</p>
      <p><img alt="Remote display experience" src="{{site.baseurl}}/Resources/images/architecture-graphic.png"></p>
    </div>
  </div>
</div>
<br/>

<h2>Setup<span class="pull-right"><a id="setup-toggle" class="toggle-button" onClick="hideDiv('setup')">Hide</a></span></h2>
<hr/>
<div id="setup" class="toggle-section">
  <div class="row">
    <div class="col-xs-24 col-no-padding">
      <p>To get started, you'll need to set up a Windows 10 IoT Core device with the latest Insider build of Windows 10 (OS Version 10.0.14295.1000) - visit the <a href="{{site.baseurl}}/{{page.lang}}/GetStarted.htm">Get Started</a> page to set up your board.</p>
      <p>Setup is quick and easy - follow the three steps below to use the remote display technology.</p>
      <p><b>1. Turn on the remote display functionality on your Windows 10 IoT Core device.</b></p>
			<p>With a board running the latest Insider build of Windows 10 IoT Core, you're almost setup to use the remote display experience.</p>
			<p>First, connect your device to the Internet via either Ethernet or WiFi. Connect a display to your Windows 10 IoT Core device, and locate the IP address as shown on the right.</p>
      <p><img alt="Default IP" src="{{site.baseurl}}/Resources/images/default-ip.png"></p>
      <p>From a PC on the same network as your IoT device, go to your web browser and navigate to "http://{IP address}:8080".  You will need to enter the name and password of your Windows 10 IoT Core device to access this site ("Administrator" and "p@ssw0rd" respectively for new devices).</p>
			<p>Choose the page "Remote" from the options on the left, and mark the check box labeled "Enable Window IoT Remote Server".  Your device is now enabled for remote display experience.</p>
      <p> <img alt="Enable remote display experience" src="{{site.baseurl}}/Resources/images/enable-remote.png"></p>
      <br/>
      <p><b>2. Install the Windows IoT Remote Client on your companion Windows 10 device.</b></p>
			<p>To enable a Windows 10 device to connect to your Windows 10 IoT Core device, you need to install our Store application.  The Windows IoT Remote Client app is currently available by link only and can be found <a href="https://www.microsoft.com/en-us/store/apps/iot-remote-client/9nblggh5mnxz">here</a>.</p>
      <p><img alt="Install client app" src="{{site.baseurl}}/Resources/images/store-app.png"></p>
      <br/>
      <p><b>3. Connect to your Windows 10 IoT Core device through the installed application.</b></p>
			<p>Run the Windows IoT Remote Client application on your Windows 10 companion device.  At the Connect screen, enter the IP address of your device.  The two devices should connect, remoting the UI experience of the Windows 10 IoT Core device to the companion device.</p>
			<p>You're now connected! From this point forward, touch and click input on the companion Windows 10 device can be used to control the Windows 10 IoT Core UWP application.  In addition, you can use accelerometer data from your connected companion device.</p>
      <p><img alt="Connect device" src="{{site.baseurl}}/Resources/images/connect-device.png"></p>
    </div>
  </div>
</div>
<br/>

<h2>Remote Sensors<span class="pull-right"><a id="sensors-toggle" class="toggle-button" onClick="hideDiv('sensors')">Hide</a></span></h2>
<hr>
<div id="sensors" class="toggle-section">
  <div class="row">
    <div class="col-xs-24 col-no-padding">
      <p>While the remote display experience is a powerful tool to put a display on any displayless device, it also offers the ability to use remote sensors in an Windows 10 IoT Core application.  If you followed the setup above with a Windows 10 tablet or phone as your companion device, you can use the accelerometer in the connected device as a sensor in your IoT Core project.</p>
      <p> To see the remote sensors in action, once again check out this <a href="https://www.youtube.com/watch?v=p4vw3taOVyM" target="_blank">YouTube video</a>.  In the second half, the demonstrator uses a tablet to remotely control the Windows 10 IoT Core device, using both touch and accelerometer to control the system.</p>
			<p>The code to use a remote sensor is simple - <b>in fact, it's the exact same code used to implement local sensors</b>.</p>
      <p><img alt="Remote display experience" src="{{site.baseurl}}/Resources/images/remote-tablet.png"></p>
      <p>In a UWP application on a Windows 10 IoT Core device, the GetDefault() function of the Accelerometer class will search for remote accelerometers on connected companion devices.</p>
			<p>View this <a href="https://www.hackster.io/windows-iot/closed-loop-control-remote-sensors-and-remote-ux-on-rpi3-ef3ed0" target="_blank">Hackster.io</a> post for a closer look at this demo using remote sensors.  Refer to the implementation of an accelerometer on this <a href="https://github.com/ms-iot/pid-control-system/blob/master/DemoApp/MainPage.xaml.cs" target="_blank">GitHub code page</a> to integrate remote sensors in your own projects.</p>
      <p><img alt="Accelerometer code" src="{{site.baseurl}}/Resources/images/accelerometer-code.png"></p>
    </div>
  </div>
</div>
<br/>

<h2>Compatibility and Scope<span class="pull-right"><a id="compatible-toggle" class="toggle-button" onClick="hideDiv('compatible')">Hide</a></span></h2>
<hr/>
<div id="compatible" class="toggle-section">
  <div class="row">
    <div class="col-xs-24 col-no-padding">
      <p> The remote display experience currently works on Raspberry Pi 2 and 3, Minnowboard Max, and Dragonboard.  These boards must be running the latest Insider build of Windows 10 IoT Core (OS Version 10.0.14295.1000).</p>
			<p> <b>The remote display and sensor capability is an "alpha" or "Insider" technology.</b> It is still in an early state, but it serves as a useful tool for putting a display on any displayless device.</p>
      <p><img alt="Compatible boards" src="{{site.baseurl}}/Resources/images/compatible-boards.png"></p>
    </div>
  </div>
</div>
<br/>

<h2>Troubleshooting<span class="pull-right"><a id="troubleshooting-toggle" class="toggle-button" onClick="hideDiv('troubleshooting')">Hide</a></span></h2>
<hr>
<div id="troubleshooting" class="toggle-section">
<p>Using the remote display technology is quick and easy, but there are still some issues that users may experience.  Make sure to follow the Setup instructions above closely - if problems persist, check below.</p>
<h4><b>When I try to connect, the client app goes to a white screen.</b></h4>
<p>Failed connections can be caused by a number of issues, but we've run into a couple more common problems:</p>
<p><b>1.</b> First, make sure your IoT device is on the same network as your companion device.  Check that you're running the latest Insider build of Windows 10 IoT Core with the Windows IoT Remote Server enabled.</p>
<p><b>2.</b> If this isn't the issue, try changing the resolution of your device to something we're guaranteed to support - to do so, follow the instructions in step 1 of the Setup section above to navigate to your device's web server.  Instead of selecting "Remote" from the menu on the left, stay on the "Home" page and scroll down to find resolution.  Try 800x600.</p>
<p><b>3.</b> If this still doesn't fix your issue, you may have an issue that stems from never connecting your device to an external display.  This will cause the device to think of itself as purely headless.  To fix this:
<ul>
  <li>
  Eject the MicroSD Card, and put into your computer
  </li>
  <li>
  Edit the <MicroSD card drive>:\config.txt
  </li>
  <li>
  Add the following lines:
  </li>
</ul>
{% highlight XML %}
hdmi_force_hotplug=1
hdmi_group=2
hdmi_mode=9
{% endhighlight %}
</p>
<h4><b>The performance on Raspberry Pi 2 is low.</b></h4>
<p>The Raspberry Pi 2 does not have GPU support on Windows 10 IoT Core, thus the framerate of the remote display experience is lower than on other boards.  Enhanced CPU on the Raspberry Pi 3, as well as graphics capabilities on the MBM and Dragonboard, allow for a more stable experience.  Lowering the resolution to 800x600 will increase performance.</p>
</div>
<br>

<script>
  function hideDiv(div) {
        var pdiv = "#" + div,
            button = pdiv + "-toggle"

        if ($(pdiv).css('display') == 'none') {
            $(pdiv).toggle('slow');
            $(button).html('Hide');
        }
        else {
            $(pdiv).toggle('slow');
            $(button).html('Show');
        }
    }
</script>
